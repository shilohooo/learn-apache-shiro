[main]
# sessionManager = org.apache.shiro.web.session.mgt.ServletContainerSessionManager
# 设置会话超时时间，单位：毫秒，默认值：1800000，即 30 分钟
# 默认情况下 globalSessionTimeout 将应用给所有 Session。
# 可以单独设置每个 Session 的 timeout 属性来为每个 Session 设置其超时时间。
# sessionManager.globalSessionTimeout=1800000

# 替代 ServletContainerSessionManager
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
# 设置 sessionManager 创建会话 Cookie 的模板
sessionIdCookie = org.apache.shiro.web.servlet.SimpleCookie
# 设置 Cookie 的名称，默认名称：JSESSIONID
sessionIdCookie.name = MySessionId
# 设置 Cookie 的域名，默认为空，即当前访问的域名
# sessionIdCookie.domain = shiloh595.site
# 设置 Cookie 的路径，默认为空，即存储在根域名下
# sessionIdCookie.path =
# 设置 Cookie 的过期时间，单位：秒，默认为：-1，表示关闭浏览器时 Cookie 过期
# 这里设置为 30 分钟
sessionIdCookie.maxAge = 1800
# Cookie HttpOnly，如果设置为 true，则客户端不会暴露给客户端脚本代码，使用 HttpOnly Cookie 有助于减少
# 某些类型的跨站点脚本攻击（XSS）
sessionIdCookie.httpOnly = true
sessionManager.sessionIdCookie = $sessionIdCookie
# 是否启用 Session Id Cookie，默认启用
# 如果禁用后将不会设置 Session Id Cookie，即默认使用了 Servlet 容器的 JSESSIONID
# 且通过 URL 重写的方式保存 SessionId：http://localhost:8080;JSESSIONID=id
sessionManager.sessionIdCookieEnabled = true
# 配置监听器
mySessionListener1 = org.shiloh.web.listener.MySessionListener1
mySessionListener2 = org.shiloh.web.listener.MySessionListener2
# 多个监听器之间使用英文逗号分隔
sessionManager.sessionListeners = $mySessionListener1, $mySessionListener2
# Session 持久化配置
# EnterpriseCacheSessionDAO：基于 ConcurrentHashMap 保存会话信息
# 使用自定义的 SessionDAO，将会话信息存储到数据库中
# sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionDAO = org.shiloh.dao.MySessionDAO
# Shiro 提供了使用 Ehcache 进行会话存储
# 设置 Session 缓存的名称，默认为：shiro-activeSessionCache
sessionDAO.activeSessionsCacheName = shiro-activeSessionCache
# 配置 SessionDAO 的 ID 生成器
# 默认使用的是 org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator，调用 Java.util.UUID 生成
sessionIdGenerator = org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
sessionDAO.sessionIdGenerator = $sessionIdGenerator
sessionManager.sessionDAO = $sessionDAO

# 会话验证配置：
# Shiro 提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话；
# 出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；
# 但是如在 web 环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，
# Shiro 提供了会话验证调度器 SessionValidationScheduler 来做这件事情。
# 会话验证调度器，sessionManager 默认使用的是：ExecutorServiceSessionValidationScheduler
# 其使用 JDK 提供的 ScheduledExecutorService 进行定期调度并验证会话是否过期
# sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
# 设置调度时间间隔，单位：毫秒，默认为1小时
# sessionValidationScheduler.interval = 10000

# Shiro 也提供了使用 Quartz 会话验证调度器
# sessionValidationScheduler = org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler
# QuartzSessionValidationScheduler 调度时间间隔设置，默认也是1小时
# sessionValidationScheduler.sessionValidationInterval = 10000

# 使用自定义的会话验证调度器
sessionValidationScheduler = org.shiloh.scheduler.MySessionValidationScheduler
# 调度时间间隔，单位：秒，默认1小时
sessionValidationScheduler.interval = 10

# 设置会话验证调度器进行会话验证时使用的会话管理器
sessionValidationScheduler.sessionManager = $sessionManager
# 设置全局会话超时时间，单位：毫秒，默认为30分钟，即如果30分钟内没有访问会话将过期
sessionManager.globalSessionTimeout = 1800000
# 是否开启会话验证调度器，默认为：true
sessionManager.sessionValidationSchedulerEnabled = true
# 设置会话验证调度器，默认就是使用：ExecutorServiceSessionValidationScheduler
sessionManager.sessionValidationScheduler = $sessionValidationScheduler
# 如果在会话过期时不想删除过期的会话，可以通过如下 ini 配置进行设置
# sessionManager.deleteInvalidSessions = false
# 使用自定义的 Session Factory
sessionFactory = org.shiloh.factory.OnlineSessionFactory
sessionManager.sessionFactory = $sessionFactory

securityManager.sessionManager = $sessionManager

# 设置缓存管理
cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
# 设置 Ehcache 缓存配置文件的位置
cacheManager.cacheManagerConfigFile = classpath:ehcache.xml
# 设置 SecurityManager 的 cacheManager，会自动设置实现了 CacheManagerAware 接口的相应对象，如 SessionDAO 的 cacheManager
securityManager.cacheManager = $cacheManager

[filters]
onlineSessionFilter = org.shiloh.web.filter.OnlineSessionFilter
onlineSessionFilter.forceLogoutUrl = /login.jsp
onlineSessionFilter.sessionDAO = $sessionDAO

[users]
shiloh = 123, admin
tom = 123

[roles]
admin = user:*, menu:*

[urls]
/logout = logout
/login.jsp = authc
/** = anon