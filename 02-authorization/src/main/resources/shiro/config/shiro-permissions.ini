# Shiro授权
# 基于资源的访问控制（显示角色）
# 这种方法也可以叫基于权限的访问控制，一般规则是：资源标识符:操作，即是资源级别的粒度
# 好处是如果要修改基本都是一个资源级别的修改，不会对其他模块的代码产生影响，粒度小。
# 但是实现起来可能稍微复杂店，需要维护：用户-角色，角色-权限之间的关系。

# 配置用户拥有的角色以及角色与权限的关系
# 配置规则：用户名=密码, 角色1, 角色2,...
# 角色=权限1, 权限2,...
# 首先根据用户名找到角色，然后根据角色再找到权限，即角色是一个或多个权限的集合。
# Shiro同样不进行权限的维护，需要通过Realm返回相应的权限信息。
# 只需要维护 用户-角色 之间的关系即可
[users]
zhang=123, role1, role2

wang=123, role1

[roles]
role1 = user:create, user:update
role2 = user:create, user:delete

# 权限字符串通配符
# 规则：资源标识符:操作:对象实例ID，即对哪个资源的哪个实例可以进行什么操作。
# 默认支持通配符权限字符串，冒号 : 表示资源/操作/实例的分隔，逗号 , 表示操作的分隔。
# 星号 * 表示任意资源/操作/实例。

# 单个资源单个权限配置
# 当用户具有角色role3时，说明用户拥有资源 system:user 的 update 权限。
role3 = system:user:update
# 可通过以下代码检查用户的权限:
# subject.checkPermissions("system:user:update");

# 单个资源多个权限配置
# 当用户具有角色role4时，说明用户拥有资源 system:user的 update 和 delete权限。
# role4 = system:user:update, system:user:delete
# 上面的配置可以简写成如下形式：
role4 = system:user:update,delete
# 可通过以下代码检查用户的权限:
# subject.checkPermissions("system:user:update,delete");


# 单个资源全部权限配置
# role5 = system:user:create,update,delete,view
# 当用户具有角色role5时，说明用户拥有资源 system:user 的所有权限
# 上面的配置可以通过通配符星号 * 简写成如下形式：
role5 = system:user:*
# 可通过以下代码检查用户的权限:
# subject.checkPermissions("system:user:*");

# 所有资源单个权限配置
role6 = *:view
# 当用户具有角色role6时，说明用户可以查看应用中的所有资源
# 比如应用中具有user, menu资源，那么用户拥有user、menu资源的view权限
# user:view, menu:view
# 可通过以下代码检查用户的权限:
# subject.checkPermissions("user:view");
# subject.checkPermissions("menu:view");

# 实例级别的权限配置：
# 单个实例单个权限
role7 = user:view:1
# 当用户具有角色role7时，说明用户对user资源的1实例拥有view权限
# 可通过以下代码检查用户的权限:
# subject.checkPermissions("user:view:1");

# 单个实例多个权限
role8 = user:update,delete:1
# 当用户具有role8角色时，说明用户对user资源的1实例拥有update和delete权限
# 可以通过以下代码检查用户的权限：
# subject.checkPermissions("user:update,delete:1");
# subject.checkPermissions("user:update:1", "user:delete:1");

# 单个实例所有权限
role9 = user:*:1
# 当用户具有角色role9时，说明用户对user资源的1实例拥有所有权限
# 可以通过以下代码检查用户的权限：
# subject.checkPermissions("user:view:1", "user:update:1", "user:delete:1");

# 所有实例单个权限
role10 = user:auth:*
# 当用户拥有role10角色时，说明用户对user资源的所有实例都拥有auth权限
# 可以通过以下代码检查用户的权限：
# subject.checkPermissions("user:auth:1", "user:auth:2");

# Shiro对权限字符串缺失部分的处理：
# 如：user:view等价于user:view:*，而org则等价于org:*或org:*:*，可以理解为前缀匹配
# 如：user:*可以匹配如：user:delete、user:update，user:delete可以匹配：user:delete:1
# user:*:1可以匹配：user:view:1
# user可以匹配：user:view或user:view:1等。

# 即星号 * 可以匹配所有，不加星号 * 可以进行前缀匹配，但是如*:view不能匹配system:user:view，需要使用*:*:view，
# 即后缀匹配必须指定前缀（多个冒号就需要多个星号 * 来匹配）。

# 通配符权限
# 如下两种权限检查方式是一样的：
# subject.checkPermission("menu:view:1");
# subject.checkPermission(new WildcardPermission("menu:view:1"));
# 可以看出用字符串更方便简洁

