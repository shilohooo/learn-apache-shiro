[users]
shiloh = 123,admin
tom = 123

[roles]
admin = user:*,menu:*

# 注册过滤器
# Filter 可以在 [main] 或 [filters] 部分注册，然后在 [urls] 部分配置 url 与 filter 的映射关系即可。
[filters]
# 此处配置过滤器，也可以使用 FilterChainResolver 自定义过滤器链，通过实现 WebEnvironment 接口配置
# 选择其中一个即可，两个一起使用会有冲突
# 使用 init 文件配置，web.xml文件中的 contextParam "shiroEnvironmentClass" 的值为：org.apache.shiro.web.env.IniWebEnvironment
# 用 Java 代码的方式自定义过滤器链，web.xml文件中的 contextParam "shiroEnvironmentClass" 的值为：自定义环境配置的全限定类名
myOncePerRequestFilter = org.shiloh.shiro.filter.MyOncePerRequestFilter
myAdviceFilter = org.shiloh.shiro.filter.MyAdviceFilter
myPathMatchingFilter = org.shiloh.shiro.filter.MyPathMatchingFilter
myAccessControlFilter = org.shiloh.shiro.filter.MyAccessControlFilter
# 自定义表单登录过滤器
formLoginFilter = org.shiloh.shiro.filter.FormLoginFilter
# 自定义角色校验过滤器，shiro 默认的角色校验规则是校验所有的角色
# 这里实现校验有任意一个指定的角色就代表认证成功的过滤器
anyRolesFilter = org.shiloh.shiro.filter.AnyRolesFilter

# 如果想禁用某个过滤器，可以将它的 enabled 属性设置为 false
# 举例：
# perms.enabled = false

# shiro 默认提供了很多过滤器，具体可以查看官网文档：https://shiro.apache.org/web.html#default_filters

[urls]
# 配置 url - filter 映射关系
/success.jsp = authc, anyRolesFilter[admin, user]
/login.jsp = formLoginFilter
/** = myOncePerRequestFilter, myAdviceFilter, myPathMatchingFilter[config], myAccessControlFilter