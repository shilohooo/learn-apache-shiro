[main]
credentialsMatcher = org.shiloh.shiro.credentials.RetryLimitHashCredentialsMatcher
# 这里的算法要和 org.shiloh.util.PasswordEncryptUtils 使用的一样
credentialsMatcher.hashAlgorithmName = md5
# 这里的 Hash 散列次数要和 org.shiloh.util.PasswordEncryptUtils 使用的一样
credentialsMatcher.hashIterations = 2
credentialsMatcher.storedCredentialsHexEncoded = true
# 注入自定义的 Realm
userRealm = org.shiloh.shiro.realm.MyShiroRealm
userRealm.credentialsMatcher = $credentialsMatcher
# 开启缓存功能，默认为：false
userRealm.cachingEnabled = true
# 开启身份验证缓存，即缓存 AuthenticationInfo，默认为：false
userRealm.authenticationCachingEnabled = true
# 设置身份验证缓存的缓存名称
userRealm.authenticationCacheName = authenticationCache
# 开启授权缓存，即缓存 AuthorizationInfo，默认为：false
userRealm.authorizationCachingEnabled = true
# 设置授权缓存的缓存名称
userRealm.authorizationCacheName = authorizationCache
securityManager.realms = $userRealm

# 设置缓存管理器，这里使用的是 Ehcache 实现
cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
# 设置缓存配置文件未知
cacheManager.cacheManagerConfigFile = classpath:shiro-ehcache.xml
# 注入缓存管理器
securityManager.cacheManager = $cacheManager

# 设置会话缓存
# securityManager 实现了 SessionsSecurityManager，
# 其会自动判断 SessionManager 是否实现了 CacheManagerAware 接口，
# 如果实现了会把 CacheManager 设置给它。
# 然后 sessionManager 会判断相应的 sessionDAO（如继承自 CachingSessionDAO）
# 是否实现了 CacheManagerAware，如果实现了会把 CacheManager 设置给它
# 带缓存的 SessionDAO；其会先查缓存，如果找不到才查数据库
sessionManager = org.apache.shiro.session.mgt.DefaultSessionManager
sessionDAO = org.shiloh.dao.MySessionDAO
# 对于 CachingSessionDAO，可以通过如下配置设置缓存的名称
# activeSessionsCacheName 默认就是 shiro-activeSessionCache
sessionDAO.activeSessionsCacheName = shiro-activeSessionCache
sessionManager.sessionDAO = $sessionDAO
# 注入 SessionDAO
securityManager.sessionManager = $sessionManager
