[main]
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
# 指定使用的算法名称，需要与生成密码的一样
credentialsMatcher.hashAlgorithmName = md5
# 指定 hash 迭代次数，需要与生成密码的一样pa
credentialsMatcher.hashIterations = 2
# 保存凭证的 16 进制编码，需要与生成密码获取的格式一样（toHex）
credentialsMatcher.storedCredentialsHexEncoded = true

# 数据库连接相关配置
dataSource = com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName = com.mysql.cj.jdbc.Driver
dataSource.url = jdbc:mysql://localhost:13306/learn_shiro?useSSL=false&useUnicode=true&characterEncoding=UTF-8
dataSource.username = root
dataSource.password = 123456

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $dataSource
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.saltStyle = COLUMN
# Shiro 的 JdbcRealm 默认盐是经过Base64编码的，在获取认证信息设置盐时，会将盐经过 base64 解码再设置盐到 AuthenticationInfo 中
# 我们的盐为 username + 随机数，未经过 base64 编码，这里需要将 JdbcRealm 的 saltIsBase64Encoded 属性设置为 false
# 从而将正确的盐设置到 AuthenticationInfo 中，避免密码匹配失败
jdbcRealm.saltIsBase64Encoded = false
# 修改获取用户信息（包括盐）的 SQL，自定义盐为username + password_salt，这里需要拼接一下
jdbcRealm.authenticationQuery = select password, concat(username, password_salt) as password_salt from users where username = ?
jdbcRealm.credentialsMatcher = $credentialsMatcher
securityManager.realms = $jdbcRealm